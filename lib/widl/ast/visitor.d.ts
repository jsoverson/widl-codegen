import { Document, NamespaceDefinition, ObjectDefinition, InterfaceDefinition, EnumDefinition, UnionDefinition, InputValueDefinition, FieldDefinition, AnnotationDefinition, OperationDefinition, EnumValueDefinition } from "../";
export declare class Writer {
    private code;
    write(source: string): void;
    string(): string;
}
export declare type ObjectMap<T = any> = {
    [key: string]: T;
};
interface NamedParameters {
    object?: ObjectDefinition;
    operations?: OperationDefinition[];
    operation?: OperationDefinition;
    argumentsDef?: InputValueDefinition[];
    argument?: InputValueDefinition;
    argumentIndex?: number;
    fields?: FieldDefinition[];
    field?: FieldDefinition;
    fieldIndex?: number;
    enumDef?: EnumDefinition;
    enumValues?: EnumValueDefinition[];
    enumValue?: EnumValueDefinition;
    union?: UnionDefinition;
    input?: InputValueDefinition;
    annotations?: AnnotationDefinition[];
    annotation?: AnnotationDefinition;
}
export declare class Context {
    config: ObjectMap;
    document?: Document;
    namespace: NamespaceDefinition;
    interface: InterfaceDefinition;
    objects: ObjectDefinition[];
    enums: EnumDefinition[];
    unions: UnionDefinition[];
    inputs: InputValueDefinition[];
    object?: ObjectDefinition;
    operations?: OperationDefinition[];
    operation?: OperationDefinition;
    argumentsDef?: InputValueDefinition[];
    argument?: InputValueDefinition;
    argumentIndex?: number;
    fields?: FieldDefinition[];
    field?: FieldDefinition;
    fieldIndex?: number;
    enum?: EnumDefinition;
    enumValues?: EnumValueDefinition[];
    enumValue?: EnumValueDefinition;
    union?: UnionDefinition;
    input?: InputValueDefinition;
    annotations?: AnnotationDefinition[];
    annotation?: AnnotationDefinition;
    constructor(config: ObjectMap, document?: Document, other?: Context);
    clone({ object, operations, operation, argumentsDef, argument, argumentIndex, fields, field, fieldIndex, enumDef, enumValues, enumValue, union, input, annotations, annotation, }: NamedParameters): Context;
    private parseDocument;
}
export interface Visitor {
    visitDocumentBefore(context: Context): void;
    visitNamespace(context: Context): void;
    visitInterfaceBefore(context: Context): void;
    visitInterface(context: Context): void;
    visitOperationsBefore(context: Context): void;
    visitOperationBefore(context: Context): void;
    visitOperation(context: Context): void;
    visitArgumentsBefore(context: Context): void;
    visitArgument(context: Context): void;
    visitArgumentsAfter(context: Context): void;
    visitOperationAfter(context: Context): void;
    visitOperationsAfter(context: Context): void;
    visitInterfaceAfter(context: Context): void;
    visitObjectsBefore(context: Context): void;
    visitObjectBefore(context: Context): void;
    visitObject(context: Context): void;
    visitObjectFieldsBefore(context: Context): void;
    visitObjectField(context: Context): void;
    visitObjectFieldsAfter(context: Context): void;
    visitObjectAfter(context: Context): void;
    visitObjectsAfter(context: Context): void;
    visitEnumsBefore(context: Context): void;
    visitEnum(context: Context): void;
    visitEnumValuesBefore(context: Context): void;
    visitEnumValue(context: Context): void;
    visitEnumValuesAfter(context: Context): void;
    visitEnumsAfter(context: Context): void;
    visitDocumentAfter(_context: Context): void;
}
export declare type Callbacks = Map<string, Map<string, VisitorCallback>>;
export declare type VisitorCallback = (_context: Context) => void;
export declare abstract class AbstractVisitor implements Visitor {
    callbacks: Callbacks;
    setCallback(phase: string, purpose: string, callback: VisitorCallback): void;
    triggerCallbacks(context: Context, phase: string): void;
    visitDocumentBefore(context: Context): void;
    triggerDocumentBefore(context: Context): void;
    visitNamespace(context: Context): void;
    triggerNamespace(context: Context): void;
    visitInterfaceBefore(context: Context): void;
    triggerInterfaceBefore(context: Context): void;
    visitInterface(context: Context): void;
    triggerInterface(context: Context): void;
    visitOperationsBefore(context: Context): void;
    triggerOperationsBefore(context: Context): void;
    visitOperationBefore(context: Context): void;
    triggerOperationBefore(context: Context): void;
    visitOperation(context: Context): void;
    triggerOperation(context: Context): void;
    visitArgumentsBefore(context: Context): void;
    triggerArgumentsBefore(context: Context): void;
    visitArgument(context: Context): void;
    triggerArgument(context: Context): void;
    visitArgumentsAfter(context: Context): void;
    triggerArgumentsAfter(context: Context): void;
    visitOperationAfter(context: Context): void;
    triggerOperationAfter(context: Context): void;
    visitOperationsAfter(context: Context): void;
    triggerOperationsAfter(context: Context): void;
    visitInterfaceAfter(context: Context): void;
    triggerInterfaceAfter(context: Context): void;
    visitObjectsBefore(context: Context): void;
    triggerObjectsBefore(context: Context): void;
    visitObjectBefore(context: Context): void;
    triggerObjectBefore(context: Context): void;
    visitObject(context: Context): void;
    triggerObject(context: Context): void;
    visitObjectFieldsBefore(context: Context): void;
    triggerObjectFieldsBefore(context: Context): void;
    visitObjectField(context: Context): void;
    triggerObjectField(context: Context): void;
    visitObjectFieldsAfter(context: Context): void;
    triggerObjectFieldsAfter(context: Context): void;
    visitObjectAfter(context: Context): void;
    triggerObjectAfter(context: Context): void;
    visitObjectsAfter(context: Context): void;
    triggerObjectsAfter(context: Context): void;
    visitEnumsBefore(context: Context): void;
    triggerEnumsBefore(context: Context): void;
    visitEnum(context: Context): void;
    triggerEnum(context: Context): void;
    visitEnumValuesBefore(context: Context): void;
    triggerEnumValuesBefore(context: Context): void;
    visitEnumValue(context: Context): void;
    triggerEnumValue(context: Context): void;
    visitEnumValuesAfter(context: Context): void;
    triggerEnumValuesAfter(context: Context): void;
    visitEnumsAfter(context: Context): void;
    triggerEnumsAfter(context: Context): void;
    visitDocumentAfter(context: Context): void;
    triggerDocumentAfter(context: Context): void;
}
export declare class BaseVisitor extends AbstractVisitor {
    writer: Writer;
    constructor(writer: Writer);
    protected write(code: string): void;
}
export {};
